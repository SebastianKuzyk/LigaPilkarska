document.addEventListener("DOMContentLoaded", () => {
    const urlParams = new URLSearchParams(window.location.search);
    const teamId = urlParams.get("teamId");

    if (!teamId) {
        alert("‚ùå B≈ÇƒÖd: Nie znaleziono ID dru≈ºyny w URL.");
        return;
    }

    console.log("üîç Za≈Çadowano stronƒô dla teamId:", teamId);

    fetchTeamDetails(teamId);
    fetchTopPlayers(teamId);
    fetchRecentMatches(teamId);
    fetchTeamRanking(teamId);

    // üìå Obs≈Çuga klikniƒôcia przycisku"
    document.getElementById("showAllPlayersBtn").addEventListener("click", () => {
        window.location.href = `players.html?teamId=${teamId}`;
    });
    document.getElementById("showAllMatchesBtn").addEventListener("click", () => {
        const teamId = new URLSearchParams(window.location.search).get("teamId");
        window.location.href = `matches.html?teamId=${teamId}`;
    });    
});


// üìä Pobieranie pozycji dru≈ºyny w rankingu
async function fetchTeamRanking(teamId) {
    try {
        const response = await fetch(`/api/team-ranking/${teamId}`);
        if (!response.ok) throw new Error(`B≈ÇƒÖd HTTP: ${response.status}`);
        
        const ranking = await response.json();
        console.log("üìä Pozycja w rankingu:", ranking);

        document.getElementById("team-ranking").textContent = `Aktualna pozycja w rankingu: ${ranking}`;
    } catch (error) {
        console.error("‚ùå B≈ÇƒÖd pobierania rankingu:", error);
    }
}

// üèÜ Pobieranie informacji o dru≈ºynie
async function fetchTeamDetails(teamId) {
    try {
        const response = await fetch(`/api/team-details/${teamId}`);
        if (!response.ok) throw new Error(`‚ùå B≈ÇƒÖd HTTP: ${response.status}`);

        const teamData = await response.json();
        console.log("‚úÖ Dane zespo≈Çu z API:", teamData);

        if (!teamData || Object.keys(teamData).length === 0) {
            console.warn("‚ö†Ô∏è Brak danych dru≈ºyny.");
            return;
        }
        document.title = `Dru≈ºyna | ${teamData.teamName}`;
        document.getElementById("team-name").textContent = teamData.teamName || "Brak danych";
        document.getElementById("stadium-name").textContent = teamData.stadiumName || "Brak danych";
        document.getElementById("city-name").textContent = teamData.city || "Brak danych";
        document.getElementById("coach-name-value").textContent = teamData.coachName || "Brak danych";
    } catch (error) {
        console.error("‚ùå B≈ÇƒÖd pobierania danych dru≈ºyny:", error);
        document.getElementById("team-name").textContent = "B≈ÇƒÖd ≈Çadowania danych";
    }
}

// üìä Pobieranie statystyk zawodnik√≥w
async function fetchTopPlayers(teamId) {
    try {
        const response = await fetch(`/api/player-details/${teamId}`);
        if (!response.ok) throw new Error(`‚ùå B≈ÇƒÖd HTTP: ${response.status}`);

        const players = await response.json();
        console.log("üìä Statystyki zawodnik√≥w:", players);

        if (!players || players.length === 0) {
            console.warn("‚ö†Ô∏è Brak danych o najlepszych zawodnikach.");
            return;
        }

        // Tworzymy obiekt, aby ≈Çatwo przypisaƒá warto≈õci do odpowiednich element√≥w
        const statsMap = {
            "Najwiƒôcej goli": "top-goals",
            "Najwiƒôcej asyst": "top-assists",
            "Najlepszy bramkarz": "top-goalkeeper",
            "Najwiƒôcej ≈º√≥≈Çtych kartek": "top-yellow-cards",
            "Najwiƒôcej czerwonych kartek": "top-red-cards"
        };

        // Najpierw ustawiamy domy≈õlne warto≈õci "---"
        Object.values(statsMap).forEach(id => {
            document.getElementById(id).textContent = "---";
        });

        // Aktualizujemy warto≈õci tylko je≈õli statisticValue > 0
        players.forEach(player => {
            if (player.statisticValue > 0 && statsMap[player.statisticType]) {
                document.getElementById(statsMap[player.statisticType]).textContent = 
                    `${player.firstName} ${player.lastName} (${player.statisticValue})`;
            }
        });
    } catch (error) {
        console.error("‚ùå B≈ÇƒÖd pobierania statystyk zawodnik√≥w:", error);
    }
}


// ‚öΩ Pobieranie ostatnich mecz√≥w dru≈ºyny
async function fetchRecentMatches(teamId) {
    try {
        const response = await fetch(`/api/match-details/${teamId}/recent`);
        if (!response.ok) throw new Error(`‚ùå B≈ÇƒÖd HTTP: ${response.status}`);

        const matches = await response.json();
        console.log("‚öΩ Ostatnie mecze:", matches);

        const tableBody = document.getElementById("matches-table");
        tableBody.innerHTML = "";

        if (!matches || matches.length === 0) {
            console.warn("‚ö†Ô∏è Brak danych o ostatnich meczach.");
            const row = document.createElement("tr");
            row.innerHTML = `<td colspan="5">Brak dostƒôpnych mecz√≥w</td>`;
            tableBody.appendChild(row);
            return;
        }

        matches.forEach(match => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${match.homeTeamName || "Brak danych"}</td>
                <td>${match.homeTeamScore !== null ? match.homeTeamScore : "?"} - ${match.awayTeamScore !== null ? match.awayTeamScore : "?"}</td>
                <td>${match.awayTeamName || "Brak danych"}</td>
                <td>${match.stadiumName || "Brak danych"}</td>
                <td>${match.locationType || "Brak danych"}</td>
            `;
            tableBody.appendChild(row);
        });
    } catch (error) {
        console.error("‚ùå B≈ÇƒÖd pobierania mecz√≥w:", error);
    }
}

function goBack() {
    window.history.back();
}